--------------------------------------------------------------
--------------------------------------------------------------
-- --
-- This VHDL file has been generated by the verilog2vhdl --
-- tool. --
-- Contact help@edautils.com for support/info.--
-- --
-- --
--------------------------------------------------------------
--------------------------------------------------------------
--
--
-- Assumptions:
-- (1) All the parameters are of type INTEGER, and hence the translated generics are of this type
--
--
-- Generated by : apache on 3/22/20 6:45 AM
--
--
library ieee;
use ieee.std_logic_1164.all;
package vl2vh_common_pack is



function vl2vh_ternary_func( constant cond : Boolean; constant trueval : std_logic; constant falseval : std_logic) return std_logic;
function vl2vh_ternary_func( constant cond : Boolean; constant trueval : std_logic_vector; constant falseval : std_logic_vector) return std_logic_vector;
end package;
package body vl2vh_common_pack is
function vl2vh_ternary_func( constant cond : Boolean; constant trueval : std_logic; constant falseval : std_logic) return std_logic is



if ( cond ) then
return trueval;
else
return falseval;
end if;



function vl2vh_ternary_func( constant cond : Boolean; constant trueval : std_logic_vector; constant falseval : std_logic_vector) return std_logic_vector is
begin
if ( cond ) then
return trueval;
else



end if;
end;
end;
library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity SHIFT10 is



indata : in std_logic_vector( 18 downto 0 );
outdata : out std_logic_vector( 18 downto 0 )
);
end entity;
architecture rtl of SHIFT10 is



process
begin
wait on indata;
if ( indata(18 ) ) then
outdata <= ( X"3FF" & indata(18 downto 10 ) );



outdata <= ( X"0" & indata(18 downto 10 ) );
end if;
end process;
end;
library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity SHIFT11 is



indata : in std_logic_vector( 18 downto 0 );
outdata : out std_logic_vector( 18 downto 0 )
);
end entity;
architecture rtl of SHIFT11 is



process
begin
wait on indata;
if ( indata(18 ) ) then
outdata <= ( X"7FF" & indata(18 downto 11 ) );



outdata <= ( X"0" & indata(18 downto 11 ) );
end if;
end process;
end;
library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity SHIFT12 is



indata : in std_logic_vector( 18 downto 0 );
outdata : out std_logic_vector( 18 downto 0 )
);
end entity;
architecture rtl of SHIFT12 is



process
begin
wait on indata;
if ( indata(18 ) ) then
outdata <= ( X"FFF" & indata(18 downto 12 ) );



outdata <= ( X"0" & indata(18 downto 12 ) );
end if;
end process;
end;
library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity SHIFT13 is



indata : in std_logic_vector( 18 downto 0 );
outdata : out std_logic_vector( 18 downto 0 )
);
end entity;
architecture rtl of SHIFT13 is



process
begin
wait on indata;
if ( indata(18 ) ) then
outdata <= ( X"1FFF" & indata(18 downto 13 ) );



outdata <= ( X"0" & indata(18 downto 13 ) );
end if;
end process;
end;
library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity SHIFT14 is



indata : in std_logic_vector( 18 downto 0 );
outdata : out std_logic_vector( 18 downto 0 )
);
end entity;
architecture rtl of SHIFT14 is



process
begin
wait on indata;
if ( indata(18 ) ) then
outdata <= ( X"3FFF" & indata(18 downto 14 ) );



outdata <= ( X"0" & indata(18 downto 14 ) );
end if;
end process;
end;
library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity SHIFT15 is



indata : in std_logic_vector( 18 downto 0 );
outdata : out std_logic_vector( 18 downto 0 )
);
end entity;
architecture rtl of SHIFT15 is



process
begin
wait on indata;
if ( indata(18 ) ) then
outdata <= ( X"7FFF" & indata(18 downto 15 ) );



outdata <= ( X"0" & indata(18 downto 15 ) );
end if;
end process;
end;
library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity SHIFT16 is



indata : in std_logic_vector( 18 downto 0 );
outdata : out std_logic_vector( 18 downto 0 )
);
end entity;
architecture rtl of SHIFT16 is



process
begin
wait on indata;
if ( indata(18 ) ) then
outdata <= ( X"FFFF" & indata(18 downto 16 ) );



outdata <= ( X"0" & indata(18 downto 16 ) );
end if;
end process;
end;
library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity SHIFT17 is



indata : in std_logic_vector( 18 downto 0 );
outdata : out std_logic_vector( 18 downto 0 )
);
end entity;
architecture rtl of SHIFT17 is



process
begin
wait on indata;
if ( indata(18 ) ) then
outdata <= ( X"1FFFF" & indata(18 downto 17 ) );



outdata <= ( X"0" & indata(18 downto 17 ) );
end if;
end process;
end;
library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vl2vh_common_pack.all;
entity MY_NCO is



clk : in std_logic;
frq : in std_logic_vector( 31 downto 0 );
sin : out std_logic_vector( 15 downto 0 );
cos : out std_logic_vector( 15 downto 0 )
);
end entity;
architecture rtl of MY_NCO is



signal judge0 : std_logic;
signal phase0 : std_logic_vector( 18 downto 0 );
signal temp0 : std_logic_vector( 18 downto 0 );
signal x0 : std_logic_vector( 18 downto 0 );
signal y0 : std_logic_vector( 18 downto 0 );



signal phase1 : std_logic_vector( 18 downto 0 );
signal temp1 : std_logic_vector( 18 downto 0 );
signal x1 : std_logic_vector( 18 downto 0 );
signal y1 : std_logic_vector( 18 downto 0 );
signal judge2 : std_logic;



signal temp2 : std_logic_vector( 18 downto 0 );
signal x2 : std_logic_vector( 18 downto 0 );
signal y2 : std_logic_vector( 18 downto 0 );
